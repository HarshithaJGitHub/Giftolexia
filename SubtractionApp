<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Learn Math The Fun Way - Subtraction</title>
    <style>
      /* Basic body styles */
      body {
        margin: 0;
        font-family: serif;
        background-color: #f8f9fa;
      }
      /* A universal rule for more predictable layouts */
      * {
        box-sizing: border-box;
      }

      /* --- DEFAULT STYLES (LAPTOP VIEW) --- */
      /* These styles apply to screens wider than 900px */

      .app-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
        background-color: white;
      }

      .header-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 20px;
      }

      .header-logo img {
        width: 120px;
        height: 100px;
        object-fit: contain;
      }

      .header-center {
        text-align: center;
        flex: 1;
        padding: 0 20px;
      }

      .header-title {
        color: black;
        font-size: 34px;
        margin: 0 0 10px 0;
        font-family: serif;
      }

      .progress-container {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 20px;
        width: 100%;
      }

      .progress-bar {
        flex: 1;
        height: 10px;
        background-color: white;
        border: 2px solid black;
        border-radius: 5px;
        max-width: 400px;
      }

      .progress-fill {
        height: 100%;
        background-color: grey;
        border-radius: 5px;
        transition: width 0.5s ease-in-out;
      }

      .score-text {
        color: black;
        font-size: 20px;
        font-weight: bold;
        font-family: serif;
      }

      .timer {
        width: 80px;
        text-align: right;
        color: black;
        font-size: 24px;
        font-weight: bold;
      }

      .main-content {
        display: flex;
        border: 2px solid black;
        border-radius: 10px;
        overflow: hidden;
        min-height: 450px;
      }

      .level-panel {
        width: 300px;
        border-right: 2px solid black;
        padding: 25px;
        display: flex;
        flex-direction: column;
        gap: 25px;
      }

      .level-button {
        flex: 1;
        padding: 15px;
        border: 2px solid black;
        color: black;
        border-radius: 8px;
        cursor: pointer;
        text-align: left;
        transition: all 0.3s ease;
        display: flex;
        font-family: serif;
        font-size: 24px;
        flex-direction: column;
        justify-content: center;
      }

      .question-panel {
        flex: 1;
        display: flex;
        flex-direction: column;
        padding: 25px;
        text-align: center;
      }

      .question-area {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }

      .footer {
        text-align: center;
        padding: 20px 0;
        font-family: serif;
        color: #555;
        font-size: 20px;
      }

      /* --- RESPONSIVE STYLES (MOBILE VIEW) --- */
      /* These styles activate when the screen is 900px wide or less */

      @media (max-width: 900px) {
        .header-container {
          flex-direction: column;
          gap: 15px;
        }

        /* On mobile, show the top row and make it a flex container */
        .header-top-row {
          display: flex;
          justify-content: space-between;
          align-items: center;
          width: 100%;
        }

        .header-center {
          padding: 0;
        }

        .main-content {
          flex-direction: column;
        }

        .level-panel {
          width: 100%;
          border-right: none;
          border-bottom: 2px solid black;
          padding: 20px;
        }

        .question-panel {
          padding: 20px;
          min-height: 400px;
        }
      }
    </style>
  </head>
  <body>
    <div id="root"></div>

    <!-- Load React -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js"></script>

    <!-- Your React App -->
    <script type="text/babel">
      const { useState, useEffect } = React;

      const SubtractionLearningApp = () => {
        const [selectedLevel, setSelectedLevel] = useState(null);
        const [gameMode, setGameMode] = useState("Numerical");
        const [score, setScore] = useState(0);
        const [currentQuestion, setCurrentQuestion] = useState(null);
        const [userAnswer, setUserAnswer] = useState("");
        const [feedback, setFeedback] = useState("");
        const [isCorrect, setIsCorrect] = useState(null);
        const [time, setTime] = React.useState(0);

        React.useEffect(() => {
          const timerId = setInterval(() => {
            setTime((prevTime) => prevTime + 1);
          }, 1000);
          return () => clearInterval(timerId);
        }, []);

        const formatTime = (totalSeconds) => {
          const minutes = Math.floor(totalSeconds / 60)
            .toString()
            .padStart(2, "0");
          const seconds = (totalSeconds % 60).toString().padStart(2, "0");
          return `${minutes}:${seconds}`;
        };

        const appreciationMessages = [
          "Great job! ðŸŽ‰",
          "Well done!",
          "You're becoming a math master!",
          "Fantastic work!",
          "Keep it up!",
        ];

        const generateQuestion = (level, gameMode) => {
          const generateOperands = (level) => {
            let a1, a2;
            switch (level) {
              case 1:
                a1 = Math.floor(Math.random() * 20) + 1;
                do {
                  a2 = Math.floor(Math.random() * 20) + 1;
                } while (a2 >= a1);
                break;
              case 2:
                a1 = Math.floor(Math.random() * 80) + 20;
                do {
                  a2 = Math.floor(Math.random() * 99) + 1;
                } while (a2 >= a1);
                break;
              case 3:
                a1 = Math.floor(Math.random() * 151) + 100;
                do {
                  a2 = Math.floor(Math.random() * 240) + 10;
                } while (a2 >= a1);
                break;
              default:
                a1 = 20;
                a2 = 10;
            }
            return { a1, a2, sub: a1 - a2 };
          };

          const wordProblemGenerators = {
            1: () => {
              const { a1, a2, sub } = generateOperands(1);
              const templates = [
                `Priya has ${a1} marbles. She gave ${a2} marbles to her friend. How many marbles does Priya have now?`,
                `A boy had ${a1} chocolates. He ate ${a2} chocolates. How many chocolates are left with him?`,
                `There were ${a1} birds sitting on a tree. ${a2} birds flew away. How many birds are left on the tree?`,
                `Ravi had ${a1} pencils. He lost ${a2} pencils in school. How many pencils does he have now?`,
                `There were ${a1} balloons at a party. ${a2} balloons popped. How many balloons are still there?`,
              ];
              return {
                question:
                  templates[Math.floor(Math.random() * templates.length)],
                correctAnswer: `${sub}`,
              };
            },
            2: () => {
              const { a1, a2, sub } = generateOperands(2);
              const templates = [
                `A shop had ${a1} candies. ${a2} candies were sold. How many candies are left in the shop?`,
                `Grandpa had ${a1} mangoes in a basket. He gave ${a2} mangoes to his neighbors. How many mangoes are left?`,
                `A farmer had ${a1} sacks of rice. He sold ${a2} sacks in the market. How many sacks are left with him?`,
                `A school bus had ${a1} kids in the morning. ${a2} kids got off at their stops. How many kids are still in the bus?`,
                `A library had ${a1} books on a shelf. ${a2} books were borrowed by students. How many books are still on the shelf?`,
              ];
              return {
                question:
                  templates[Math.floor(Math.random() * templates.length)],
                correctAnswer: `${sub}`,
              };
            },
            3: () => {
              const { a1, a2, sub } = generateOperands(3);
              let a3;
              do {
                a3 = Math.floor(Math.random() * 120) + 10;
              } while (a3 > a1 - a2);
              const templates = [
                `A zoo had ${a1} animals. They received ${a2} new animals, but ${a3} animals were sent to another zoo. How many animals are now in the zoo? `,
                `A baker made ${a1} cupcakes. He baked ${a2} more in the oven. He sold ${a3} cupcakes to his customers. How many cupcakes does he have now?`,
                `A class had ${a1} students. ${a2} more students joined the class. But ${a3} students went home early. How many students are in the class now?`,
                `A library had ${a1} storybooks. It received ${a2} more books as a donation. Later, ${a3} books were borrowed by students. How many books are still in the library?`,
                `I saved ${a1} rupees in my savings box. Then added ${a2} more rupees. Later used ${a3} rupees to buy gift. How much money is left in the savings box?`,
              ];
              return {
                question:
                  templates[Math.floor(Math.random() * templates.length)],
                correctAnswer: `${a1 - a2 + a3}`,
              };
            },
          };

          const numericalProblemGenerators = {
            1: () => {
              const { a1, a2, sub } = generateOperands(1);
              return { question: `${a1} - ${a2} = ?`, correctAnswer: `${sub}` };
            },
            2: () => {
              const { a1, a2, sub } = generateOperands(2);
              return { question: `${a1} - ${a2} = ?`, correctAnswer: `${sub}` };
            },
            3: () => {
              const { a1, a2, sub } = generateOperands(3);
              return { question: `${a1} - ${a2} = ?`, correctAnswer: `${sub}` };
            },
          };

          const generator =
            gameMode === "Word Problems"
              ? wordProblemGenerators[level]
              : numericalProblemGenerators[level];
          return generator ? generator() : null;
        };

        const levels = [
          { id: 1, label: "Level 1", description: "Basic Subtraction" },
          { id: 2, label: "Level 2", description: "Intermediate Subtraction" },
          { id: 3, label: "Level 3", description: "Advanced Subtraction" },
        ];

        const handleLevelSelect = (level) => {
          setSelectedLevel(level);
          setCurrentQuestion(generateQuestion(level, gameMode));
          setFeedback("");
          setIsCorrect(null);
          setUserAnswer("");
        };

        const handleAnswerSubmit = () => {
          if (!currentQuestion) return;
          const normalizedAnswer = userAnswer.trim();
          if (normalizedAnswer === currentQuestion.correctAnswer) {
            setScore(score + 10);
            setFeedback(
              appreciationMessages[
                Math.floor(Math.random() * appreciationMessages.length)
              ]
            );
            setIsCorrect(true);
            setTimeout(() => {
              setCurrentQuestion(generateQuestion(selectedLevel, gameMode));
              setUserAnswer("");
              setFeedback("");
              setIsCorrect(null);
            }, 1500);
          } else {
            setFeedback(
              `Not quite! The correct answer is ${currentQuestion.correctAnswer}`
            );
            setIsCorrect(false);
            setTimeout(() => {
              setCurrentQuestion(generateQuestion(selectedLevel, gameMode));
              setUserAnswer("");
              setFeedback("");
              setIsCorrect(null);
            }, 2500);
          }
        };

        return (
          <div className="app-container">
            {/* Header Section */}
            <div className="header-container">
              {/* This div is only for structuring the mobile view */}
              <div className="header-top-row">
                {/* This logo is for the desktop view */}
                <div className="header-logo">
                  <img src="logo.png" alt="Math App Logo" />
                </div>
                <div className="timer">{formatTime(time)}</div>
              </div>

              <div className="header-center">
                <h1 className="header-title">
                  Learn Math The Fun Way - Subtraction
                </h1>
                <div className="progress-container">
                  <div className="progress-bar">
                    <div
                      className="progress-fill"
                      style={{ width: `${Math.min(score / 10, 100)}%` }}
                    ></div>
                  </div>
                  <div className="score-text">Score: {score}</div>
                </div>
              </div>
              {/* This timer is for the desktop view */}
              <div className="timer" style={{ display: "none" }}>
                {formatTime(time)}
              </div>
            </div>

            {/* Main Content Area */}
            <div className="main-content">
              {/* Level Selection Section */}
              <div className="level-panel">
                {levels.map((level) => (
                  <button
                    key={level.id}
                    onClick={() => handleLevelSelect(level.id)}
                    className="level-button"
                    style={{
                      backgroundColor:
                        selectedLevel === level.id ? "grey" : "white",
                    }}
                  >
                    <div style={{ fontWeight: "bold" }}>{level.label}</div>
                    <div style={{ fontSize: "18px", marginTop: "5px" }}>
                      {level.description}
                    </div>
                  </button>
                ))}
              </div>

              {/* Main Question Area */}
              <div className="question-panel">
                <div className="question-area">
                  {!selectedLevel ? (
                    <h2 style={{ fontSize: "28px" }}>
                      Choose a level to start!
                    </h2>
                  ) : currentQuestion ? (
                    <div
                      style={{
                        display: "flex",
                        flexDirection: "column",
                        alignItems: "center",
                        width: "100%",
                        maxWidth: "500px",
                      }}
                    >
                      <div style={{ fontSize: "26px", marginBottom: "30px" }}>
                        {currentQuestion.question}
                      </div>
                      <input
                        type="text"
                        value={userAnswer}
                        onChange={(e) => {
                          if (/^[0-9\s]*$/.test(e.target.value)) {
                            setUserAnswer(e.target.value);
                          }
                        }}
                        placeholder="Enter your answer"
                        style={{
                          width: "250px",
                          padding: "12px",
                          fontSize: "20px",
                          border: `2px solid ${
                            isCorrect === null
                              ? "black"
                              : isCorrect
                              ? "green"
                              : "red"
                          }`,
                          borderRadius: "8px",
                          marginBottom: "20px",
                          textAlign: "center",
                        }}
                        onKeyPress={(e) =>
                          e.key === "Enter" && handleAnswerSubmit()
                        }
                      />
                      <button
                        onClick={handleAnswerSubmit}
                        style={{
                          padding: "12px 24px",
                          backgroundColor: "white",
                          color: "black",
                          border: "2px solid black",
                          borderRadius: "8px",
                          cursor: "pointer",
                          fontWeight: "bold",
                          fontSize: "16px",
                          marginBottom: "20px",
                        }}
                      >
                        Submit Answer
                      </button>
                      {feedback && (
                        <div
                          style={{
                            color: isCorrect ? "green" : "red",
                            fontWeight: "bold",
                            fontSize: "18px",
                          }}
                        >
                          {feedback}
                        </div>
                      )}
                    </div>
                  ) : null}
                </div>

                <div
                  style={{
                    display: "flex",
                    justifyContent: "center",
                    gap: "20px",
                  }}
                >
                  {["Numerical", "Word Problems"].map((mode) => (
                    <button
                      key={mode}
                      onClick={() => {
                        if (gameMode !== mode) {
                          setGameMode(mode);
                          if (selectedLevel) {
                            setCurrentQuestion(
                              generateQuestion(selectedLevel, mode)
                            );
                          }
                        }
                      }}
                      style={{
                        padding: "10px 20px",
                        border: "2px solid black",
                        backgroundColor: gameMode === mode ? "grey" : "white",
                        color: "black",
                        borderRadius: "8px",
                        fontFamily: "serif",
                        cursor: "pointer",
                        fontSize: "20px",
                      }}
                    >
                      {mode}
                    </button>
                  ))}
                </div>
              </div>
            </div>
            <footer className="footer">@Giftolexia</footer>
          </div>
        );
      };

      // Render the app
      const root = ReactDOM.createRoot(document.getElementById("root"));
      root.render(<SubtractionLearningApp />);
    </script>
  </body>
</html>
