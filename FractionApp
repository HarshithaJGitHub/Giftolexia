<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Fractions Learning App</title>
    <!-- Include React and ReactDOM from CDN -->
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <!-- Include Babel for JSX transformation -->
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
    <style>
      /* Basic body styles */
      body {
        margin: 0;
        background-color: #f8f9fa;
      }
      /* A universal rule for more predictable layouts */
      * {
        box-sizing: border-box;
      }

      /* --- DEFAULT STYLES (LAPTOP VIEW) --- */
      /* These styles apply to screens wider than 900px */

      .app-container {
        font-family: serif;
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
        background-color: white;
      }

      .header-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 20px;
      }

      .header-logo img {
        width: 120px;
        height: 100px;
        object-fit: contain;
      }

      .header-center {
        text-align: center;
        flex: 1;
        padding: 0 20px;
      }

      .header-title {
        color: black;
        font-size: 34px;
        margin: 0 0 10px 0;
        font-family: serif;
      }

      .progress-container {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 20px;
        width: 100%;
      }

      .progress-bar {
        flex: 1;
        height: 10px;
        background-color: white;
        border: 2px solid black;
        border-radius: 5px;
        max-width: 400px;
      }

      .progress-fill {
        height: 100%;
        background-color: grey;
        border-radius: 5px;
        transition: width 0.5s ease-in-out;
      }

      .score-text {
        color: black;
        font-size: 20px;
        font-weight: bold;
        font-family: serif;
      }

      .timer {
        width: 80px;
        text-align: right;
        color: black;
        font-size: 24px;
        font-weight: bold;
      }

      .main-content {
        display: flex;
        border: 2px solid black;
        border-radius: 10px;
        overflow: hidden;
        min-height: 450px;
      }

      .level-panel {
        width: 300px;
        border-right: 2px solid black;
        padding: 25px;
        display: flex;
        flex-direction: column;
        gap: 25px;
      }

      .level-button {
        flex: 1;
        padding: 15px;
        border: 2px solid black;
        color: black;
        border-radius: 8px;
        cursor: pointer;
        text-align: left;
        transition: all 0.3s ease;
        display: flex;
        font-family: serif;
        font-size: 24px;
        flex-direction: column;
        justify-content: center;
      }

      .question-panel {
        flex: 1;
        display: flex;
        flex-direction: column;
        padding: 25px;
        text-align: center;
      }

      .question-area {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }

      .footer {
        text-align: center;
        padding: 20px 0;
        font-family: serif;
        color: #555;
        font-size: 20px;
      }

      /* This is hidden on desktop by default */
      .header-top-row {
        display: none;
      }

      /* --- RESPONSIVE STYLES (MOBILE VIEW) --- */
      /* These styles apply when the screen is 900px wide or less */

      @media (max-width: 900px) {
        .header-container {
          flex-direction: column;
          gap: 15px;
        }

        /* Create a new flex container for the top row (logo & timer) */
        .header-top-row {
          display: flex;
          justify-content: space-between;
          align-items: center;
          width: 100%;
        }

        /* Hide the original logo and timer meant for desktop */
        .header-container > .header-logo,
        .header-container > .timer {
          display: none;
        }

        /* The center content now becomes the bottom row */
        .header-center {
          padding: 0;
          width: 100%;
        }

        /* Main content stacks vertically */
        .main-content {
          flex-direction: column;
        }

        .level-panel {
          width: 100%;
          border-right: none;
          border-bottom: 2px solid black;
          padding: 20px;
        }

        .question-panel {
          padding: 20px;
          min-height: 400px;
        }
      }
    </style>
  </head>
  <body>
    <div id="root"></div>

    <!-- App code -->
    <script type="text/babel">
      // React component code
      const FractionsLearningApp = () => {
        const [selectedLevel, setSelectedLevel] = React.useState(null);
        const [gameMode, setGameMode] = React.useState("Numerical");
        const [score, setScore] = React.useState(0);
        const [currentQuestion, setCurrentQuestion] = React.useState(null);
        const [userAnswer, setUserAnswer] = React.useState("");
        const [feedback, setFeedback] = React.useState("");
        const [isCorrect, setIsCorrect] = React.useState(null);
        const [time, setTime] = React.useState(0);

        React.useEffect(() => {
          const timerId = setInterval(() => {
            setTime((prevTime) => prevTime + 1);
          }, 1000);
          return () => clearInterval(timerId);
        }, []);

        const formatTime = (totalSeconds) => {
          const minutes = Math.floor(totalSeconds / 60)
            .toString()
            .padStart(2, "0");
          const seconds = (totalSeconds % 60).toString().padStart(2, "0");
          return `${minutes}:${seconds}`;
        };

        const appreciationMessages = [
          "Great job! ðŸŽ‰",
          "Well done!",
          "You're becoming a math master!",
          "Fantastic work!",
          "Keep it up!",
        ];
        const findGCD = (a, b) => (b === 0 ? a : findGCD(b, a % b));
        const simplifyFraction = (numerator, denominator) => {
          const gcd = findGCD(Math.abs(numerator), Math.abs(denominator));
          return { numerator: numerator / gcd, denominator: denominator / gcd };
        };
        const findLCM = (a, b) => Math.abs(a * b) / findGCD(a, b);

        const generateQuestion = (level, gameMode) => {
          const createRandomFraction = () => {
            const denominator = Math.floor(Math.random() * 8) + 2;
            const numerator = Math.floor(Math.random() * (denominator - 1)) + 1;
            return { numerator, denominator, value: numerator / denominator };
          };

          const wordProblemGenerators = {
            1: () => {
              const f1 = createRandomFraction();
              let f2;
              do {
                f2 = createRandomFraction();
              } while (f1.value === f2.value);
              const templates = [
                `Maya has ${f1.numerator}/${f1.denominator} of a pizza, and Ram has ${f2.numerator}/${f2.denominator}. The bigger share is?`,
                `Arrange fractions in ascending order: ${f1.numerator}/${f1.denominator}, ${f2.numerator}/${f2.denominator}`,
                `A chef used ${f1.numerator}/${f1.denominator} of a bottle of oil for cooking and ${f2.numerator}/${f2.denominator} for baking. Which amount is larger?`,
                `Raj ate ${f1.numerator}/${f1.denominator} of a cake, and Ravi ate ${f2.numerator}/${f2.denominator}. The bigger portion eaten is?`,
                `Convert ${f1.numerator}/${f1.denominator} into a decimal.`,
              ];
              const chosenTemplate =
                templates[Math.floor(Math.random() * templates.length)];
              if (chosenTemplate.includes("Convert")) {
                const exactDecimal = f1.numerator / f1.denominator;
                return {
                  question: chosenTemplate,
                  correctAnswer: exactDecimal.toFixed(2),
                  isDecimalQuestion: true,
                  exactDecimal,
                  acceptableAnswers: [
                    exactDecimal.toFixed(1),
                    exactDecimal.toFixed(2),
                    exactDecimal.toFixed(3),
                  ],
                };
              } else {
                return {
                  question: chosenTemplate,
                  correctAnswer: chosenTemplate.includes("bigger")
                    ? f1.value > f2.value
                      ? `${f1.numerator}/${f1.denominator}`
                      : `${f2.numerator}/${f2.denominator}`
                    : f1.value < f2.value
                    ? `${f1.numerator}/${f1.denominator}, ${f2.numerator}/${f2.denominator}`
                    : `${f2.numerator}/${f2.denominator}, ${f1.numerator}/${f1.denominator}`,
                  isDecimalQuestion: false,
                };
              }
            },
            2: () => {
              const f1 = createRandomFraction();
              const f2 = createRandomFraction();
              const templates = [
                `Priya has ${f1.numerator}/${f1.denominator} of a chocolate, and her friend gives her ${f2.numerator}/${f2.denominator} more. How much chocolate does she have now?`,
                `Sita has a rope ${f1.numerator}/${f1.denominator} meters long. She joins it with another rope of ${f2.numerator}/${f2.denominator} meters. What is the total length of the rope?`,
                `Arjun painted ${f1.numerator}/${f1.denominator} of the wall on Monday and ${f2.numerator}/${f2.denominator} on Tuesday. How much of the wall did he paint in total?`,
                `Meera used ${f1.numerator}/${f1.denominator} of her new pencil while doing homework and ${f2.numerator}/${f2.denominator} while drawing. How much of the pencil did she use altogether?`,
                `Gopal drank ${f1.numerator}/${f1.denominator} of a glass of juice in the morning and ${f2.numerator}/${f2.denominator} in the evening. How much juice did he drink in total?`,
                `A water tank contains ${f1.numerator}/${f1.denominator} liters of water. After rainfall, the water level increased by ${f2.numerator}/${f2.denominator} liters. What is the total amount of water in the tank now?`,
                `A TV show lasts ${f1.numerator}/${f1.denominator} hours, and a movie lasts ${f2.numerator}/${f2.denominator} hours. How long will it take to watch both?`,
                `A customer bought ${f1.numerator}/${f1.denominator} kg of apples and ${f2.numerator}/${f2.denominator} kg of bananas. What is the total weight of the fruits?`,
                `Ravi has ${f1.numerator}/${f1.denominator} kg of rice, and he buys ${f2.numerator}/${f2.denominator} kg more. How much rice does he have now?`,
              ];
              const chosenTemplate =
                templates[Math.floor(Math.random() * templates.length)];
              const lcd = findLCM(f1.denominator, f2.denominator);
              const sumNumerator =
                f1.numerator * (lcd / f1.denominator) +
                f2.numerator * (lcd / f2.denominator);
              const simplifiedResult = simplifyFraction(sumNumerator, lcd);
              return {
                question: chosenTemplate,
                correctAnswer:
                  simplifiedResult.denominator === 1
                    ? `${simplifiedResult.numerator}`
                    : `${simplifiedResult.numerator}/${simplifiedResult.denominator}`,
                isDecimalQuestion: false,
              };
            },
            3: () => {
              const f1 = createRandomFraction();
              const f2 = createRandomFraction();
              const [largerF, smallerF] =
                f1.value > f2.value ? [f1, f2] : [f2, f1];
              const templates = [
                `Mom had ${largerF.numerator}/${largerF.denominator} liters of milk. She used ${smallerF.numerator}/${smallerF.denominator} liters to make tea. How much milk is left?`,
                `A tailor had ${largerF.numerator}/${largerF.denominator} meters of cloth. He used ${smallerF.numerator}/${smallerF.denominator} meters to make a dress. How much cloth is remaining?`,
                `Yash planned to run ${largerF.numerator}/${largerF.denominator} Km. He has already run ${smallerF.numerator}/${smallerF.denominator} Km. How much distance does he still need to run?`,
                `Rohan had a pizza with ${largerF.numerator}/${largerF.denominator} left. He ate ${smallerF.numerator}/${smallerF.denominator} of it. How much pizza is left?`,
                `Riya had ${largerF.numerator}/${largerF.denominator} of a glass of juice. She drank ${smallerF.numerator}/${smallerF.denominator}. How much juice is left in the glass?`,
                `Ravi had ${largerF.numerator}/${largerF.denominator} kg of mangoes. He sold ${smallerF.numerator}/${smallerF.denominator} kg. How much does he have now?`,
                `A writer planned to write ${largerF.numerator}/${largerF.denominator} pages of a book. She has completed ${smallerF.numerator}/${smallerF.denominator} pages. How many pages are left to write?`,
                `A chef had ${largerF.numerator}/${largerF.denominator} kg of sugar. He used ${smallerF.numerator}/${smallerF.denominator} kg for baking. How much sugar is left?`,
              ];
              const chosenTemplate =
                templates[Math.floor(Math.random() * templates.length)];
              const lcd = findLCM(largerF.denominator, smallerF.denominator);
              const diffNumerator =
                largerF.numerator * (lcd / largerF.denominator) -
                smallerF.numerator * (lcd / smallerF.denominator);
              const simplifiedResult = simplifyFraction(diffNumerator, lcd);
              return {
                question: chosenTemplate,
                correctAnswer:
                  simplifiedResult.denominator === 1
                    ? `${simplifiedResult.numerator}`
                    : `${simplifiedResult.numerator}/${simplifiedResult.denominator}`,
                isDecimalQuestion: false,
              };
            },
            4: () => {
              const f1 = createRandomFraction();
              const f2 = createRandomFraction();
              const templates = [
                `Neha needs ${f1.numerator}/${f1.denominator} cups of sugar for one cake. She is making ${f2.numerator}/${f2.denominator} times the recipe. How much sugar does she need in total?`,
                `Each bottle can hold ${f1.numerator}/${f1.denominator} liters of water. If we fill ${f2.numerator}/${f2.denominator} bottles, how much water do we use?`,
                `A shopkeeper sells ${f1.numerator}/${f1.denominator} Kg of apples in one hour. If he sells apples for ${f2.numerator}/${f2.denominator} hours, how many Kg of apples does he sell?`,
                `A farmer plants ${f1.numerator}/${f1.denominator} rows of seeds in one field. He has ${f2.numerator}/${f2.denominator} fields. How many rows of seeds will he plant in total?`,
                `Adhi gives ${f1.numerator}/${f1.denominator} of a chocolate bar to each friend. If he has ${f2.numerator}/${f2.denominator} friends, how much chocolate does he give away in total?`,
                `A train moves at ${f1.numerator}/${f1.denominator} km per minute. How far will it travel in ${f2.numerator}/${f2.denominator} minutes?`,
                `Each chocolate bar costs ${f1.numerator}/${f1.denominator} rupees. If Kiran buys ${f2.numerator}/${f2.denominator} bars, how much does she pay?`,
              ];
              const chosenTemplate =
                templates[Math.floor(Math.random() * templates.length)];
              const resultNumerator = f1.numerator * f2.numerator;
              const resultDenominator = f1.denominator * f2.denominator;
              const simplifiedResult = simplifyFraction(
                resultNumerator,
                resultDenominator
              );
              return {
                question: chosenTemplate,
                correctAnswer:
                  simplifiedResult.denominator === 1
                    ? `${simplifiedResult.numerator}`
                    : `${simplifiedResult.numerator}/${simplifiedResult.denominator}`,
                isDecimalQuestion: false,
              };
            },
          };

          const numericalModeGenerators = {
            1: () => {
              const f1 = createRandomFraction();
              let f2;
              do {
                f2 = createRandomFraction();
              } while (f1.value === f2.value);
              const questionTypes = [
                {
                  question: `Which fraction is bigger?: ${f1.numerator}/${f1.denominator}, ${f2.numerator}/${f2.denominator}`,
                  correctAnswer:
                    f1.value > f2.value
                      ? `${f1.numerator}/${f1.denominator}`
                      : `${f2.numerator}/${f2.denominator}`,
                  isDecimalQuestion: false,
                },
                {
                  question: `Arrange fractions in ascending order: ${f1.numerator}/${f1.denominator}, ${f2.numerator}/${f2.denominator}`,
                  correctAnswer:
                    f1.value < f2.value
                      ? `${f1.numerator}/${f1.denominator}, ${f2.numerator}/${f2.denominator}`
                      : `${f2.numerator}/${f2.denominator}, ${f1.numerator}/${f1.denominator}`,
                  isDecimalQuestion: false,
                },
                {
                  question: `Convert ${f1.numerator}/${f1.denominator} to a decimal`,
                  isDecimalQuestion: true,
                  exactDecimal: f1.numerator / f1.denominator,
                  correctAnswer: (f1.numerator / f1.denominator).toFixed(2),
                  acceptableAnswers: [
                    (f1.numerator / f1.denominator).toFixed(1),
                    (f1.numerator / f1.denominator).toFixed(2),
                    (f1.numerator / f1.denominator).toFixed(3),
                  ],
                },
              ];
              return questionTypes[
                Math.floor(Math.random() * questionTypes.length)
              ];
            },
            2: () => {
              const f1 = createRandomFraction();
              const f2 = createRandomFraction();
              const lcd = findLCM(f1.denominator, f2.denominator);
              const sumNumerator =
                f1.numerator * (lcd / f1.denominator) +
                f2.numerator * (lcd / f2.denominator);
              const simplifiedResult = simplifyFraction(sumNumerator, lcd);
              return {
                question: `Add and Simplify: ${f1.numerator}/${f1.denominator} + ${f2.numerator}/${f2.denominator} = ?`,
                correctAnswer:
                  simplifiedResult.denominator === 1
                    ? `${simplifiedResult.numerator}`
                    : `${simplifiedResult.numerator}/${simplifiedResult.denominator}`,
                isDecimalQuestion: false,
              };
            },
            3: () => {
              const f1 = createRandomFraction();
              const f2 = createRandomFraction();
              const [largerF, smallerF] =
                f1.value > f2.value ? [f1, f2] : [f2, f1];
              const lcd = findLCM(largerF.denominator, smallerF.denominator);
              const diffNumerator =
                largerF.numerator * (lcd / largerF.denominator) -
                smallerF.numerator * (lcd / smallerF.denominator);
              const simplifiedResult = simplifyFraction(diffNumerator, lcd);
              return {
                question: `Subtract and Simplify: ${largerF.numerator}/${largerF.denominator} - ${smallerF.numerator}/${smallerF.denominator} = ?`,
                correctAnswer:
                  simplifiedResult.denominator === 1
                    ? `${simplifiedResult.numerator}`
                    : `${simplifiedResult.numerator}/${simplifiedResult.denominator}`,
                isDecimalQuestion: false,
              };
            },
            4: () => {
              const f1 = createRandomFraction();
              const f2 = createRandomFraction();
              const resultNumerator = f1.numerator * f2.numerator;
              const resultDenominator = f1.denominator * f2.denominator;
              const simplifiedResult = simplifyFraction(
                resultNumerator,
                resultDenominator
              );
              return {
                question: `Multiply the fractions: (${f1.numerator}/${f1.denominator}) Ã— (${f2.numerator}/${f2.denominator})`,
                correctAnswer:
                  simplifiedResult.denominator === 1
                    ? `${simplifiedResult.numerator}`
                    : `${simplifiedResult.numerator}/${simplifiedResult.denominator}`,
                isDecimalQuestion: false,
              };
            },
          };

          const generator =
            gameMode === "Word Problems"
              ? wordProblemGenerators[level]
              : numericalModeGenerators[level];
          return generator ? generator() : null;
        };

        const levels = [
          { id: 1, label: "Level 1", description: "Comparing Fractions" },
          { id: 2, label: "Level 2", description: "Adding Fractions" },
          { id: 3, label: "Level 3", description: "Subtracting Fractions" },
          { id: 4, label: "Level 4", description: "Multiplying Fractions" },
        ];

        const handleLevelSelect = (level) => {
          setSelectedLevel(level);
          setCurrentQuestion(generateQuestion(level, gameMode));
          setFeedback("");
          setIsCorrect(null);
          setUserAnswer("");
        };

        const isDecimalAnswerCorrect = (userInput, question) => {
          const userDecimal = parseFloat(userInput);
          if (isNaN(userDecimal)) return false;
          return (
            question.acceptableAnswers.includes(userDecimal.toString()) ||
            Math.abs(userDecimal - question.exactDecimal) <= 0.01
          );
        };

        const handleAnswerSubmit = () => {
          if (!currentQuestion) return;
          const normalizedAnswer = userAnswer.trim().replace(/\s*,\s*/g, ", ");
          let isAnswerCorrect = currentQuestion.isDecimalQuestion
            ? isDecimalAnswerCorrect(normalizedAnswer, currentQuestion)
            : normalizedAnswer === currentQuestion.correctAnswer;
          if (isAnswerCorrect) {
            setScore(score + 10);
            setFeedback(
              appreciationMessages[
                Math.floor(Math.random() * appreciationMessages.length)
              ]
            );
            setIsCorrect(true);
            setTimeout(() => {
              setCurrentQuestion(generateQuestion(selectedLevel, gameMode));
              setUserAnswer("");
              setFeedback("");
              setIsCorrect(null);
            }, 1500);
          } else {
            setFeedback(
              currentQuestion.isDecimalQuestion
                ? `Not quite! The answer could be: ${currentQuestion.acceptableAnswers.join(
                    " or "
                  )}`
                : `Not quite! The correct answer is ${currentQuestion.correctAnswer}`
            );
            setIsCorrect(false);
            setTimeout(() => {
              setCurrentQuestion(generateQuestion(selectedLevel, gameMode));
              setUserAnswer("");
              setFeedback("");
              setIsCorrect(null);
            }, 2500);
          }
        };

        return (
          <div className="app-container">
            {/* Header Section */}
            <div className="header-container">
              <div className="header-top-row">
                <div className="header-logo">
                  <img src="logo.png" alt="Math App Logo" />
                </div>
                <div className="timer">{formatTime(time)}</div>
              </div>

              <div className="header-logo">
                <img src="logo.png" alt="Math App Logo" />
              </div>

              <div className="header-center">
                <h1 className="header-title">
                  Learn Math The Fun Way - Fractions
                </h1>
                <div className="progress-container">
                  <div className="progress-bar">
                    <div
                      className="progress-fill"
                      style={{ width: `${Math.min(score / 10, 100)}%` }}
                    ></div>
                  </div>
                  <div className="score-text">Score: {score}</div>
                </div>
              </div>
              <div className="timer">{formatTime(time)}</div>
            </div>

            {/* Main Content Area */}
            <div className="main-content">
              <div className="level-panel">
                {levels.map((level) => (
                  <button
                    key={level.id}
                    onClick={() => handleLevelSelect(level.id)}
                    className="level-button"
                    style={{
                      backgroundColor:
                        selectedLevel === level.id ? "grey" : "white",
                    }}
                  >
                    <div style={{ fontWeight: "bold" }}>{level.label}</div>
                    <div style={{ fontSize: "18px", marginTop: "5px" }}>
                      {level.description}
                    </div>
                  </button>
                ))}
              </div>

              <div className="question-panel">
                <div className="question-area">
                  {!selectedLevel ? (
                    <h2 style={{ fontSize: "28px" }}>
                      Choose a level to start!
                    </h2>
                  ) : currentQuestion ? (
                    <div
                      style={{
                        display: "flex",
                        flexDirection: "column",
                        alignItems: "center",
                        width: "100%",
                        maxWidth: "500px",
                      }}
                    >
                      <div style={{ fontSize: "26px", marginBottom: "30px" }}>
                        {currentQuestion.question}
                      </div>
                      <input
                        type="text"
                        value={userAnswer}
                        onChange={(e) => {
                          if (/^[0-9/,.\s]*$/.test(e.target.value)) {
                            setUserAnswer(e.target.value);
                          }
                        }}
                        placeholder="Enter your answer"
                        style={{
                          width: "250px",
                          padding: "12px",
                          fontSize: "20px",
                          border: `2px solid ${
                            isCorrect === null
                              ? "black"
                              : isCorrect
                              ? "green"
                              : "red"
                          }`,
                          borderRadius: "8px",
                          marginBottom: "20px",
                          textAlign: "center",
                        }}
                        onKeyPress={(e) =>
                          e.key === "Enter" && handleAnswerSubmit()
                        }
                      />
                      <button
                        onClick={handleAnswerSubmit}
                        style={{
                          padding: "12px 24px",
                          backgroundColor: "white",
                          color: "black",
                          border: "2px solid black",
                          borderRadius: "8px",
                          cursor: "pointer",
                          fontWeight: "bold",
                          fontSize: "16px",
                          marginBottom: "20px",
                        }}
                      >
                        Submit Answer
                      </button>
                      {feedback && (
                        <div
                          style={{
                            color: isCorrect ? "green" : "red",
                            fontWeight: "bold",
                            fontSize: "18px",
                          }}
                        >
                          {feedback}
                        </div>
                      )}
                    </div>
                  ) : null}
                </div>

                <div
                  style={{
                    display: "flex",
                    justifyContent: "center",
                    gap: "20px",
                  }}
                >
                  {["Numerical", "Word Problems"].map((mode) => (
                    <button
                      key={mode}
                      onClick={() => {
                        if (gameMode !== mode) {
                          setGameMode(mode);
                          if (selectedLevel) {
                            setCurrentQuestion(
                              generateQuestion(selectedLevel, mode)
                            );
                          }
                        }
                      }}
                      style={{
                        padding: "10px 20px",
                        border: "2px solid black",
                        backgroundColor: gameMode === mode ? "grey" : "white",
                        color: "black",
                        borderRadius: "8px",
                        fontFamily: "serif",
                        cursor: "pointer",
                        fontSize: "20px",
                      }}
                    >
                      {mode}
                    </button>
                  ))}
                </div>
              </div>
            </div>
            <footer className="footer">@Giftolexia</footer>
          </div>
        );
      };

      const root = ReactDOM.createRoot(document.getElementById("root"));
      root.render(<FractionsLearningApp />);
    </script>
  </body>
</html>
